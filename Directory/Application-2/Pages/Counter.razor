@page "/contact"

@using System.ComponentModel.DataAnnotations

<h1>Contact Us!</h1>
<h4>Please don't hesitate to get in touch!</h4>

@if (showConfirmation)
{
    <div class="alert alert-success">
        Thank you for your submission! We will get back to you soon.
    </div>
}

<EditForm Model="contactModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />

    @if (isLoggedIn)
    {
        <div class="form-group">
            <label for="name">Name:</label>
            <InputText id="name" class="form-control" @bind-Value="contactModel.Name" readonly />
        </div>
    }
    else
    {
        <div class="form-group">
            <label for="name">Name:</label>
            <InputText id="name" class="form-control" @bind-Value="contactModel.Name" />
            <ValidationMessage For="() => contactModel.Name" />
        </div>
    }

    <div class="form-group">
        <label for="email">Email:</label>
        <InputText id="email" class="form-control" @bind-Value="contactModel.Email" />
        <ValidationMessage For="() => contactModel.Email" />
    </div>

    <div class="form-group">
        <label for="message">Message:</label>
        <InputTextArea id="message" class="form-control" @bind-Value="contactModel.Message" />
        <ValidationMessage For="() => contactModel.Message" />
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@code {
    private ContactModel contactModel = new ContactModel();
    private bool showConfirmation = false;
    private bool isLoggedIn = false; // Determine if the user is logged in

    private class ContactModel
    {
        [Required(ErrorMessage = "Name is required")]
        public string Name { get; set; }

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Message is required")]
        public string Message { get; set; }
    }

    private void HandleValidSubmit()
    {
        // Handle the submission when the form is valid
        // You can send the data to the server or perform any other desired actions
        showConfirmation = true;
    }

    protected override void OnInitialized()
    {
        
         //var user = await userManager.GetUserAsync(User);
         //if (user != null)
         //{
         //    isLoggedIn = true;
         //    contactModel.Name = user.UserName;
         //}
    }
}


